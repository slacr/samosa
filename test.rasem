require 'color'

PIXEL_SIZE = 1  # not really necessary? just increase density in svg conversion
INPUT_FILE = "input.fasta"
COLOR_HUE = 110  # expressed in degrees (110 = green)
COLOR_LIGHTNESS = 35

# Open our sequence file
contents = ""
File.open(INPUT_FILE, "rb") do |file|
  contents = file.read
end

def draw_pixel(x, y, color)
  # Takes an x, y, and draws pixels  between them
  x = x * PIXEL_SIZE
  y = y * PIXEL_SIZE

  (0..PIXEL_SIZE).each do |pos_add|
    line x, y+pos_add, x+PIXEL_SIZE, y+pos_add, stroke: color
  end
end

def get_color_scale(num_sequences)
  # We'll grade down the saturation from most to least common char in the 
  # distribution, using num_sequences to determine the number of intervals
  color_intervals = []
  (1..num_sequences).each do |color_interval|
    saturation = (100/num_sequences).ceil * color_interval
    square_color = Color::HSL.new(COLOR_HUE, saturation, COLOR_LIGHTNESS)
    color_intervals << square_color.css_rgb # Convert HSL to css rgb string
  end
  # index 0 has the least saturation, while index num_sequence has the most
  return color_intervals
end

# Remove the sequence header and remove newlines
sequences = contents.split(/^>.*$/)
sequences = sequences.map { |seq| seq.gsub("\n", "") }
# Get the length of the longest sequence
maxlength = 0 
sequences.each { |sequence| maxlength = sequence.length if (sequence.length >= maxlength) }
# Remove empties
sequences.select! { |sequence| sequence.length != 0 }

# Get an array of color codes for distribution proportions
color_intervals = get_color_scale(sequences.length)

color_sequences = []
sequences.each do |seq|
  color_sequences << []
end

puts "Got #{sequences.length} sequences"
(0..maxlength).each do |char_pos|
  char_dist = Hash.new(0)
  sequences.each do |sequence|
    char_dist[sequence[char_pos]] += 1
  end
  # char_dist contains the num of occurences for each char in this position

  # We use the num of occurences to determine the amount of saturation.
  #   example:  if 'a' occurs 4 times and there's 10 sequences, every 'a'
  #             in this position gets 40% saturation
  sequences.each_index do |index|
    occurences = char_dist[sequences[index][char_pos]]
    color_sequences[index][char_pos] = color_intervals[occurences-1]
  end
end

# Use the maxlength to get the size of the drawing for each sequence
squaresize = Math.sqrt(maxlength).ceil

set_width (squaresize * (PIXEL_SIZE)) + 30
set_height (squaresize * (PIXEL_SIZE) * sequences.length) + 30

cur_x = 0
cur_y = 0

color_sequences.each do |color_sequence|
  color_sequence.each do |color_at_pos|
    draw_pixel(cur_x, cur_y, color_at_pos.to_s)
    if cur_x == squaresize
      cur_x = 0
      cur_y += 1
    else
      cur_x += 1
    end
  end
  cur_x = 0
  cur_y += 3
end
