require 'color'

INPUT_FILE = "input.fasta"
COLOR_HUE = 110  # expressed in degrees (110 = green)
COLOR_LIGHTNESS = 35

def draw_pixel(x, y, color)
  # Takes an x, y, and a color
  (0..1).each do |pos_add|
    line x, y+pos_add, x+1, y+pos_add, stroke: color
  end
end

def get_color_scale(num_sequences)
  # We'll grade down the saturation from most to least common char in the 
  # distribution, using num_sequences to determine the number of intervals
  color_intervals = []
  (1..num_sequences).each do |color_interval|
    saturation = (100/num_sequences).ceil * color_interval
    square_color = Color::HSL.new(COLOR_HUE, saturation, COLOR_LIGHTNESS)
    color_intervals << square_color.css_rgb # Convert HSL to css rgb string
  end
  # index 0 has the least saturation, while index num_sequence has the most
  return color_intervals
end

# Open our sequence file
contents = ""
File.open(INPUT_FILE, "rb") do |file|
  contents = file.read
end

# Remove the sequence header and remove newlines
sequences = contents.split(/^>.*$/)
sequences = sequences.map { |seq| seq.gsub("\n", "") }
# Get the length of the longest sequence
maxlength = 0 
sequences.each { |sequence| maxlength = sequence.length if (sequence.length >= maxlength) }
# Remove empties
sequences.select! { |sequence| sequence.length != 0 }

# Use the maxlength to get the size of the drawing for each sequence
squaresize = Math.sqrt(maxlength).ceil

puts "Got #{sequences.length} sequences"

# Create a regex string to split our sequences.
seq_regex = ""
(0..squaresize).each { seq_regex << '(.)' }
# splitted is an array containing an array for each sequence. Each of these 
# sequence arrays in turn contain arrays of their nucleotides, with a length 
# no more than squaresize.
splitted = []
sequences.each do |sequence|
  splitted << sequence.scan(Regexp.new seq_regex)
end

# sequence_tables is a string meant for HTML. Every sequence gets a <table>, 
# and every <tr> has a length of squaresize. Every nucleotide is surrounded 
# by <td> tags.
#
# ...maybe this should be done in an erb/haml file.
sequence_tables = ""
splitted.each do |sequence|
  sequence_tables << "<table>"
  sequence.each do |row|
    sequence_tables << "<tr>"
    row.each do |nucleotide|
      sequence_tables << "<td>" << nucleotide << "</td>"
    end.join("</tr>")
  end.join("</table>")
end

#p sequence_tables
#exit

# char_dist is an array that contains a Hash for every position. Every Hash
# maps a character to its occurences for that position.
char_dist = []
(0..(maxlength-1)).each do |char_pos|
  pos_dist = Hash.new(0)
  sequences.each do |sequence|
    pos_dist[sequence[char_pos]] += 1
  end
  char_dist << pos_dist
end

# Get an array of color codes for each level of frequency
color_intervals = get_color_scale(sequences.length)

# color_sequences is an array of arrays, containing the color values for 
# each position in each sequence. It's used to draw the final image.
color_sequences = []
sequences.each do
  color_sequences << []
end

# Gets the character at each position in each sequence, then finds that 
# character's occurences for that position. Uses the number of occurences
# to determine that pixel's color in color_sequences.
sequences.each_index do |index|
  (0..maxlength).each do |char_pos|
    character = sequences[index][char_pos]
    occurences = char_dist[char_pos][character]
    color_sequences[index][char_pos] = color_intervals[occurences-1]
  end
end


set_width squaresize + 30
set_height (squaresize * sequences.length) + 30

cur_x = 0
cur_y = 0

color_sequences.each do |color_sequence|
  color_sequence.each do |color_at_pos|
    draw_pixel(cur_x, cur_y, color_at_pos.to_s)
    if cur_x == squaresize
      cur_x = 0
      cur_y += 1
    else
      cur_x += 1
    end
  end
  cur_x = 0
  cur_y += 3
end
