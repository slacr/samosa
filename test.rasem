PIXEL_SIZE = 3
INPUT_FILE = "input.fasta"
COLOR_RANGE = "10"
COLOR_HUE = 110

# Open our sequence file
contents = ""
File.open(INPUT_FILE, "rb") do |file|
  contents = file.read
end


def draw_pixel(x, y, color)
  # Takes an x, y, and draws pixels  between them
  x = x * PIXEL_SIZE
  y = y * PIXEL_SIZE

  (0..PIXEL_SIZE).each do |pos_add|
    line x, y+pos_add, x+PIXEL_SIZE, y+pos_add, stroke: color
  end
end

maxlength = 0
sequences = contents.split(/^>.*$/)
sequences = sequences.map { |seq| seq.sub("\n", "") }
sequences.each { |sequence| maxlength = sequence.length if (sequence.length >= maxlength) }
sequences.select! { |sequence| sequence.length != 0 }


color_sequences = []
sequences.each do |seq|
  color_sequences << []
end

puts "Got #{sequences.length} sequences"
(0..maxlength).each do |char_pos|
  char_dist = Hash.new(0)
  sequences.each do |sequence|
    char_dist[sequence[char_pos]] += 1
  end
  # Have distribution, now find max and print those green. All others print red
  char_dist.sort_by { |key, value| value }
  max_pair = char_dist.shift
  # If the value of the second most common matches the first
  if char_dist.value? max_pair[1]
    # we have multiple tied for first place
    color_sequences.each do |color_sequence|
      # set the current char pos we're at to be grey
      color_sequence[char_pos] = :darkgray
    end
  else
    sequences.each_index do |index|
      if sequences[index][char_pos] == max_pair[0]
        color_sequences[index][char_pos] = :green
      else
        color_sequences[index][char_pos] = :tomato
      end
    end
  end
end

puts color_sequences


# actually draw them
squaresize = Math.sqrt(maxlength).ceil

set_width (squaresize * (PIXEL_SIZE)) + 30
set_height (squaresize * (PIXEL_SIZE) * sequences.length) + 30

cur_x = 0
cur_y = 0

color_sequences.each do |color_sequence|
  color_sequence.each do |color_at_pos|
    draw_pixel(cur_x, cur_y, color_at_pos.to_s)
    if cur_x == squaresize
      cur_x = 0
      cur_y += 1
    else
      cur_x += 1
    end
  end
  cur_x = 0
  cur_y += 3
end
